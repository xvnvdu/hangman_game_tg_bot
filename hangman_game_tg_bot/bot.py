import telebot
import random
import time
from telebot import types

bot = telebot.TeleBot('your_token')

eng = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
ru = ['–∞', '–±', '–≤', '–≥', '–¥', '–µ', '—ë', '–∂', '–∑', '–∏', '–π', '–∫', '–ª', '–º', '–Ω', '–æ', '–ø', '—Ä', '—Å', '—Ç', '—É', '—Ñ', '—Ö', '—Ü', '—á', '—à', '—â', '—ä', '—ã', '—å', '—ç', '—é', '—è']


@bot.message_handler(commands=['start'])
def start_bot(message):
    if message.from_user.last_name == None:
        bot.send_message(message.chat.id, f'‚≠êÔ∏è –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –í–∏—Å–µ–ª–∏—Ü–∞!\n'
                                          f'\nü§ñ –≠—Ç–æ—Ç –±–æ—Ç –∑–Ω–∞–∫–æ–º —Å–æ –≤—Å–µ–º–∏ –Ω–∞—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ –≤ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π –∏–≥—Ä–µ –æ–Ω —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ—Ç –æ–¥–Ω–æ –∏–∑ ~51 —Ç—ã—Å—è—á–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö. '
                                          f'–°–ª–æ–≤–∞, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å, –±–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç.\n'
                                          f'\n‚ú® –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /play')
    else:
        bot.send_message(message.chat.id, f'‚≠êÔ∏è –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} {message.from_user.last_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –í–∏—Å–µ–ª–∏—Ü–∞!\n'
                         f'\nü§ñ –≠—Ç–æ—Ç –±–æ—Ç –∑–Ω–∞–∫–æ–º —Å–æ –≤—Å–µ–º–∏ –Ω–∞—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ –≤ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π –∏–≥—Ä–µ –æ–Ω —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ—Ç –æ–¥–Ω–æ –∏–∑ ~51 —Ç—ã—Å—è—á–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö. '
                         f'–°–ª–æ–≤–∞, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å, –±–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç.\n'
                         f'\n‚ú® –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /play')

@bot.message_handler(commands=['play'])
def play_game(message):
    bot.send_message(message.chat.id, '‚ö°Ô∏è –ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å !\n–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–Ω–µ –±–æ–ª–µ–µ 20):')
    bot.register_next_step_handler(message, tries_num)


def replay_game(message):
    bot.send_message(message.chat.id, '–í–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20 !\n–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–Ω–µ –±–æ–ª–µ–µ 20):')
    bot.register_next_step_handler(message, tries_num)


@bot.message_handler()
def tries_num(message):

    word = list(random.choice(open('russian_nouns.txt', encoding='utf-8').read().split()))
    unknown_word_list = list('_' * len(word))
    unknown_word = '_ ' * len(word)
    symbols = len(word)
    symbols_guessed = 0
    choices = []
    eng = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
    ru = ['–∞', '–±', '–≤', '–≥', '–¥', '–µ', '—ë', '–∂', '–∑', '–∏', '–π', '–∫', '–ª', '–º', '–Ω', '–æ', '–ø', '—Ä', '—Å', '—Ç', '—É', '—Ñ', '—Ö', '—Ü', '—á', '—à', '—â', '—ä', '—ã', '—å', '—ç', '—é', '—è']

    try:
        if int(message.text) > 20:
            bot.send_message(message.chat.id, '‚õîÔ∏è –í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ, –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ !')
            time.sleep(1)
            replay_game(message)
            return
        elif int(message.text) <= 0:
            bot.send_message(message.chat.id, '‚õîÔ∏èÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ —Ä–∞–≤–Ω—ã–º –Ω—É–ª—é !')
            time.sleep(1)
            replay_game(message)
            return
        else:
            tries = int(message.text)
            total_tries = int(message.text)
            bot.send_message(message.chat.id, f'‚úÖ –û—Ç–ª–∏—á–Ω–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ —Ä–∞–≤–Ω–æ {message.text} !')
            time.sleep(1)
            game_info(message, word, unknown_word_list, unknown_word, symbols, symbols_guessed, tries, choices, eng, ru, total_tries)
            return
    except:
        if message.text.startswith('/start'):
            start_bot(message)
            return
        elif message.text.startswith('/play'):
            play_game(message)
            return
        else:
            bot.send_message(message.chat.id, '‚õîÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º !')
            time.sleep(1)
            replay_game(message)
            return


def game_info(message, word, unknown_word_list, unknown_word, symbols, symbols_guessed, tries, choices, eng, ru, total_tries):

    bot.send_message(message.chat.id, f'üîí –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {" ".join(unknown_word_list)}\n'
                                      f'üîé –ë—É–∫–≤ –æ—Ç–≥–∞–¥–∞–Ω–æ: {symbols_guessed} –∏–∑ {symbols}\n'
                                      f'üìù –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {tries}\n'
                                      f'‚òëÔ∏è –ë—É–∫–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã: {", ".join(choices)}')
    time.sleep(0.2)
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É:')
    bot.register_next_step_handler(message, game, word, unknown_word_list, unknown_word, symbols, symbols_guessed, tries, choices, eng, ru, total_tries)
    return


def same_letter(message, letter, word, unknown_word_list, unknown_word, symbols, symbols_guessed, tries, choices, eng, ru, total_tries):
    bot.send_message(message.chat.id, f'‚õîÔ∏è –ë—É–∫–≤–∞ {letter.upper()} —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ä–∞–Ω–µ–µ !')
    time.sleep(1)
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É:')
    bot.register_next_step_handler(message, game, word, unknown_word_list, unknown_word, symbols, symbols_guessed, tries, choices, eng, ru, total_tries)
    return


def wrong_letter(message, word, unknown_word_list, unknown_word, symbols, symbols_guessed, tries, choices, eng, ru, total_tries):
    bot.send_message(message.chat.id, f'üîí –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {" ".join(unknown_word_list)}\n'
                                      f'üîé –ë—É–∫–≤ –æ—Ç–≥–∞–¥–∞–Ω–æ: {symbols_guessed} –∏–∑ {symbols}\n'
                                      f'üìù –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {tries}\n'
                                      f'‚òëÔ∏è –ë—É–∫–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã: {", ".join(choices)}')
    time.sleep(0.2)
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É:')
    bot.register_next_step_handler(message, game, word, unknown_word_list, unknown_word, symbols, symbols_guessed, tries, choices, eng, ru, total_tries)
    return


def win(message, word, tries, choices, total_tries):
    bot.send_message(message.chat.id, 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ !')
    time.sleep(0.1)
    bot.send_sticker(message.chat.id, sticker='CAACAgIAAxkBAAEMo4VmuhFPt1O5IlyGD0XtVwhA9on8SAACcCIAAq7-4Er8II1NUPOSrTUE')
    time.sleep(0.1)
    bot.send_message(message.chat.id, f'üîë –°–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —É–≥–∞–¥–∞–ª–∏: {"".join(word).upper()}\n'
                                      f'ü™Ñ –ü–æ–ø—ã—Ç–æ–∫ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {total_tries - tries} –∏–∑ {total_tries}\n'
                                      f'‚úèÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã: {", ".join(choices)}')
    time.sleep(1)
    if_win(message, word)
    return


def if_win(message, word):
    buttons = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(f'–£–∑–Ω–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "{"".join(word)}"', url=f'https://ru.wiktionary.org/wiki/{"".join(word).lower()}')
    buttons.row(button1)
    bot.send_message(message.chat.id, 'üî• –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ !\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /play\n–ß—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start', reply_markup=buttons)
    return


def lose(message, word, tries, choices, total_tries):
    bot.send_message(message.chat.id, 'üíÄ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.')
    time.sleep(0.1)
    bot.send_sticker(message.chat.id, sticker='CAACAgIAAxkBAAEMo41muhay0Fe1yYPs_047FFORpNO_7QACUSgAAts3qEr5ao1UtSI6YjUE')
    time.sleep(0.1)
    bot.send_message(message.chat.id, f'üîë –°–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏: {"".join(word).upper()}\n'
                                      f'ü™Ñ –ü–æ–ø—ã—Ç–æ–∫ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {total_tries - tries} –∏–∑ {total_tries}\n'
                                      f'‚úèÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã: {", ".join(choices)}')
    time.sleep(1)
    if_lose(message, word)
    return


def if_lose(message, word):

    buttons = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(f'–£–∑–Ω–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "{"".join(word)}"', url=f'https://ru.wiktionary.org/wiki/{"".join(word).lower()}')
    buttons.row(button1)
    bot.send_message(message.chat.id, 'üåß –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ !\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /play\n–ß—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start', reply_markup=buttons)
    return


@bot.message_handler()
def game(message, word, unknown_word_list, unknown_word, symbols, symbols_guessed, tries, choices, eng, ru, total_tries):

    letter = message.text.lower()

    if tries >= 1:
        found = False
        for i in range(len(word)):
            if letter == word[i]:
                unknown_word_list.pop(i)
                unknown_word_list.insert(i, letter.upper())
                found = True

        if message.text.startswith('/start'):
            start_bot(message)
            return
        elif message.text.startswith('/play'):
            play_game(message)
            return

        elif letter.lower() in ru:
            if found:
                if letter.lower() not in choices:
                    symbols_guessed = len(word) - unknown_word_list.count('_')
                    choices.extend(letter)
                    bot.send_message(message.chat.id, f'‚úÖ –í–µ—Ä–Ω–æ !')
                    if symbols_guessed != symbols:
                        time.sleep(1)
                        game_info(message, word, unknown_word_list, unknown_word, symbols, symbols_guessed, tries, choices, eng, ru, total_tries)
                        return
                    else:
                        time.sleep(1)
                        win(message, word, tries, choices, total_tries)
                        return
                else:
                    same_letter(message, letter, word, unknown_word_list, unknown_word, symbols, symbols_guessed, tries, choices, eng, ru, total_tries)
                    return
            else:
                if letter.lower() not in choices:
                    if tries > 1:
                        choices.extend(letter)
                        tries -= 1
                        bot.send_message(message.chat.id, f'‚ùåÔ∏è –ë—É–∫–≤–∞ –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ !')
                        time.sleep(1)
                        wrong_letter(message, word, unknown_word_list, unknown_word, symbols, symbols_guessed, tries, choices, eng, ru, total_tries)
                        return
                    elif tries == 1:
                        choices.extend(letter)
                        tries -= 1
                        bot.send_message(message.chat.id, f'‚ùåÔ∏è –ë—É–∫–≤–∞ –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ !')
                        time.sleep(1)
                        lose(message, word, tries, choices, total_tries)
                        return
                else:
                    same_letter(message, letter, word, unknown_word_list, unknown_word, symbols, symbols_guessed, tries, choices, eng, ru, total_tries)
                    return
        else:
            if len(letter) > 1:
                bot.send_message(message.chat.id, f'‚õî –í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ !')
                time.sleep(1)
                wrong_letter(message, word, unknown_word_list, unknown_word, symbols, symbols_guessed, tries, choices, eng, ru, total_tries)
                return
            elif letter.lower() in eng:
                bot.send_message(message.chat.id, f'‚õîÔ∏è –í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ !')
                time.sleep(1)
                wrong_letter(message, word, unknown_word_list, unknown_word, symbols, symbols_guessed, tries, choices, eng, ru, total_tries)
                return
            else:
                bot.send_message(message.chat.id, f'‚õîÔ∏è –í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –±—É–∫–≤—É !\n–í—ã –∂–µ, –≤—Å–µ-—Ç–∞–∫–∏, —Å–ª–æ–≤–æ —É–≥–∞–¥—ã–≤–∞–µ—Ç–µ :)')
                time.sleep(1)
                wrong_letter(message, word, unknown_word_list, unknown_word, symbols, symbols_guessed, tries, choices, eng, ru, total_tries)
                return


bot.infinity_polling()
